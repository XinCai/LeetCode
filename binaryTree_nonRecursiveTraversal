package binaryTree;


import java.util.*;

class TreeNode{
    public TreeNode(int val) {
        this.val = val;
        this.leftchild = null;
        this.rightchild = null;
    }

    int val;
    TreeNode leftchild;
    TreeNode rightchild;
}


public class binarytree {

    /**
     *
     *          1
     *         / \
     *        2   3
     *       / \
     *      4   5
     *
     *      Depth First Traversals:
     * (a) Inorder (Left, Root, Right) : 4 2 5 1 3
     * (b) Preorder (Root, Left, Right) : 1 2 4 5 3
     * (c) Postorder (Left, Right, Root) : 4 5 2 3 1
     *
     * @param args
     */
    public static void main(String[] args) {
        TreeNode n1 = new TreeNode(1);
        TreeNode n2 = new TreeNode(2);
        TreeNode n3 = new TreeNode(3);
        TreeNode n4 = new TreeNode(4);
        TreeNode n5 = new TreeNode(5);
        n1.leftchild = n2;
        n1.rightchild = n3;
        n2.leftchild = n4;
        n2.rightchild = n5;

        //inorderTraversal(n1);

        LinkedList<Integer> linkedList = new LinkedList<Integer>();
        linkedList.addFirst(1);
        linkedList.addFirst(2);
        linkedList.addFirst(3);
        linkedList.addFirst(4);

        System.out.println(linkedList);

        System.out.println();
        System.out.println(postorderTraversal(n1));

    }

    public static List preorderTraversal(TreeNode root){
        List<Integer> res = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();

        TreeNode curr = root;
        while (!stack.isEmpty() || curr !=null){
            if (curr != null){
                stack.push(curr);
                res.add(curr.val); // add before going to children = pre-order
                curr = curr.leftchild;
            }else {
                TreeNode node = stack.pop();
                curr = node.rightchild;
            }

        }

        return res;
    }

    public static List inorderTraversal(TreeNode root){
        List<Integer> res = new ArrayList<Integer>();
        Stack<TreeNode> stack= new Stack<TreeNode>();
        TreeNode curr = root;
        while (curr!=null || !stack.isEmpty()){
            if (curr != null){
                stack.push(curr);
                curr = curr.leftchild;
            }else {
                TreeNode node = stack.pop();
                res.add(node.val); // add after all left children
                curr = curr.rightchild;
            }
        }

        return res;
    }

    public static List postorderTraversal(TreeNode root){
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode p = root;
        while(!stack.isEmpty() || p != null) {
            if(p != null) {
                stack.push(p);
                result.add(p.val);            // Reverse the process of preorder , which postorder
                p = p.rightchild;             // Reverse the process of preorder
            } else {
                TreeNode node = stack.pop();
                p = node.leftchild;           // Reverse the process of preorder
            }
        }
        Collections.reverse(result);  // note : reverse the list which is the post order result ss
        return result;
    }
    
        public static void bfs(TreeNode root){
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        HashSet<TreeNode> visitedNodes = new HashSet<TreeNode>();
        queue.add(root);

        while (!queue.isEmpty()){
            TreeNode curr = queue.poll();

            System.out.println(curr.val + " ");
            if (!visitedNodes.contains(curr.leftchild) && curr.leftchild !=null){
                queue.offer(curr.leftchild);
                visitedNodes.add(curr.leftchild);
            }

            if (!visitedNodes.contains(curr.rightchild) && curr.rightchild!=null){
                queue.offer(curr.rightchild);
                visitedNodes.add(curr.rightchild);
            }

        }


    }

    public static void dfs(TreeNode root){
        Stack<TreeNode> stack = new Stack<TreeNode>();
        HashSet<TreeNode> visitedNodes = new HashSet<TreeNode>();
        stack.push(root);

        while (!stack.isEmpty()){
            TreeNode curr = stack.pop();
            
            System.out.println(curr.val + " ");
            
            // make sure push right child first , and then left child because of using stack, first in last out
            
            if (!visitedNodes.contains(curr.rightchild) && curr.rightchild!=null){
                stack.push(curr.rightchild);
                visitedNodes.add(curr.rightchild);
            }

            if (!visitedNodes.contains(curr.leftchild) && curr.leftchild !=null){
                stack.push(curr.leftchild);
                visitedNodes.add(curr.leftchild);
            }
        }
    }

}
