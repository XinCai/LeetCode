package binaryTree;

class BinaryTreeNode {
    public BinaryTreeNode(int val) {
        this.val = val;
        this.leftChild = null;
        this.rightChild = null;
    }

    int val;

    BinaryTreeNode leftChild;
    BinaryTreeNode rightChild;
}

/**
 *   binary tree
 *
 *              1
 *             / \
 *            2   3
 *           / \
 *          4   5
 *
 *          Depth First Traversals:
 *          (a) Inorder (Left, Root, Right) : 4 2 5 1 3
 *          (b) Preorder (Root, Left, Right) : 1 2 4 5 3
 *          (c) Postorder (Left, Right, Root) : 4 5 2 3 1
 *
 *
 *
 */
public class BinaryTree {

    public static void inorderTraversal(BinaryTreeNode root){
        if (root == null){
            return;
        }

        inorderTraversal(root.leftChild);
        System.out.println(root.val);
        inorderTraversal(root.rightChild);

    }

    public static void preOrderTraversal(BinaryTreeNode root){

        if (root == null){
            return;
        }
        System.out.println(root.val);  // pre order
        preOrderTraversal(root.leftChild);
        preOrderTraversal(root.rightChild);

    }

    public static void postOrderTraversal(BinaryTreeNode root){
        if (root == null){
            return;
        }

        postOrderTraversal(root.leftChild);
        postOrderTraversal(root.rightChild);
        System.out.println(root.val);
    }

    public static void main(String[] args) {
        BinaryTreeNode node1 = new BinaryTreeNode(1);
        BinaryTreeNode node2 = new BinaryTreeNode(2);
        BinaryTreeNode node3 = new BinaryTreeNode(3);
        BinaryTreeNode node4 = new BinaryTreeNode(4);
        BinaryTreeNode node5 = new BinaryTreeNode(5);

        node1.leftChild = node2;
        node1.rightChild = node3;

        node2.leftChild = node4;
        node2.rightChild = node5;

        //preOrderTraversal(node1);

        //inorderTraversal(node1);

        postOrderTraversal(node1);


    }
}
