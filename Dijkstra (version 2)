package Dijkstra;

import java.util.*;

public class DijkstraDemo {
    /**
     *
     *  Graph with weight
     *
     *            1       6
     *        B ----- D ---- F
     *    5 / |      /|
     *    /   |     / |
     *   A   2|  4 /  |
     *    \   |   /   | 3
     *   1 \  |  /    |
     *      \ | /     |
     *        C ----- E
     *            8
     *
     *
     * @param args
     */
    public static void main(String[] args) {

        Node A = new Node("A");
        Node B = new Node("B");
        Node C = new Node("C");
        Node D = new Node("D");
        Node E = new Node("E");
        Node F = new Node("F");

        List<Node> neighbours_a = new ArrayList<Node>();
        neighbours_a.add(B);
        neighbours_a.add(C);
        A.setNeighbours(neighbours_a);

        List<Node> neighbours_b = new ArrayList<Node>();
        neighbours_b.add(A);
        neighbours_b.add(C);
        neighbours_b.add(D);
        B.setNeighbours(neighbours_b);

        List<Node> neighbours_c = new ArrayList<Node>();
        neighbours_c.add(A);
        neighbours_c.add(B);
        neighbours_c.add(D);
        neighbours_c.add(E);
        C.setNeighbours(neighbours_c);


        List<Node> neighbours_d = new ArrayList<Node>();
        neighbours_d.add(B);
        neighbours_d.add(C);
        neighbours_d.add(E);
        neighbours_d.add(F);
        D.setNeighbours(neighbours_d);

        List<Node> neighbours_e = new ArrayList<Node>();
        neighbours_e.add(C);
        neighbours_e.add(D);
        E.setNeighbours(neighbours_a);


        List<Node> neighbours_f = new ArrayList<Node>();
        neighbours_f.add(D);
        F.setNeighbours(neighbours_f);


        HashSet<Node> nodes = new HashSet<Node>();
        nodes.add(A);
        nodes.add(B);
        nodes.add(C);
        nodes.add(D);
        nodes.add(E);
        nodes.add(F);

        Edge edgeAB = new Edge(A,B,5);
        Edge edgeAC = new Edge(A,C,1);
        Edge edgeBA = new Edge(B,A,5);
        Edge edgeBC = new Edge(B,C,2);
        Edge edgeBD = new Edge(B,D,1);
        Edge edgeCA = new Edge(C,A,1);
        Edge edgeCB = new Edge(C,B,2);
        Edge edgeCD = new Edge(C,D,4);
        Edge edgeCE = new Edge(C,E,8);
        Edge edgeDB = new Edge(D,B,1);
        Edge edgeDC = new Edge(D,C,4);
        Edge edgeDE = new Edge(D,E,3);
        Edge edgeDF = new Edge(D,F,6);
        Edge edgeEC = new Edge(E,C,8);
        Edge edgeED = new Edge(E,D,3);
        Edge edgeFD = new Edge(F,D,6);

        Set<Edge> edges = new HashSet<Edge>();
        edges.add(edgeAB);
        edges.add(edgeAC);
        edges.add(edgeBA);
        edges.add(edgeBC);
        edges.add(edgeBD);
        edges.add(edgeCA);
        edges.add(edgeCB);
        edges.add(edgeCD);
        edges.add(edgeCE);
        edges.add(edgeDB);
        edges.add(edgeDC);
        edges.add(edgeDE);
        edges.add(edgeDF);
        edges.add(edgeEC);
        edges.add(edgeED);
        edges.add(edgeFD);

        Graph graph = new Graph(nodes,edges);
        DijkstraDemo demo = new DijkstraDemo();
        HashMap<Node,Integer> result = demo.dijkstra(A,graph);


    }

    public HashMap<Node,Integer> dijkstra(Node startNode, Graph graph){

        HashMap<Node, Integer> totalCost = new HashMap<>();
        HashMap<Node, Node> parent = new HashMap<>();
        Set<Node> visited = new HashSet<>();

        Comparator<Node> comparator = new Comparator<Node>() {
            public int compare(Node o1, Node o2) {
                return o1.getWeightFromSource() - o2.getWeightFromSource();
            }
        };

        Queue<Node> priorityQueue = new PriorityQueue<Node>(comparator); // init priority Queue

        startNode.setWeightFromSource(0); // set distance from source node

        priorityQueue.add(startNode); // add start node into queue

        totalCost.put(startNode,0); // dynamic update table

        for (Node node: graph.getNodes()) {
            if (node != startNode){
                totalCost.put(node,Integer.MAX_VALUE);
            }
        }

        while (!priorityQueue.isEmpty()){
            Node newSmallest = priorityQueue.poll();

            String nodeName = newSmallest.getName();
            System.out.print(nodeName + " ");
            int dist = newSmallest.getWeightFromSource();
            System.out.println(dist);

            visited.add(newSmallest);

            for (Node neighbour: newSmallest.getNeighbours()) {
                if (!visited.contains(neighbour)){

                    parent.put(neighbour, newSmallest);

                   if ((dist + distance(newSmallest,neighbour,graph))< neighbour.getWeightFromSource()){
                       neighbour.setWeightFromSource(dist+distance(newSmallest,neighbour,graph));
                       priorityQueue.add(neighbour);
                       totalCost.put(neighbour,dist+distance(newSmallest,neighbour,graph));
                   }
                }
            }
        }
        System.out.printf(String.valueOf(parent));

        return totalCost;


    }

    private Integer distance(Node newSmallest, Node neighbour, Graph graph) {
        Node start = newSmallest;
        Node target = neighbour;

        for (Edge e : graph.getEdges()) {
            if (e.getSource() == start && e.getDestination() == target){
                return e.getWeight();
            }
        }
        return Integer.MAX_VALUE;
    }
}
